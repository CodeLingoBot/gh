{"name":"gh","tagline":"Fast GitHub command line client.","body":"# g + h = github [![Build Status](https://travis-ci.org/jingweno/gh.png?branch=master)](https://travis-ci.org/jingweno/gh)\r\n\r\nFast GitHub command line client implemented in Go. Current version is [v1.0.0](https://github.com/jingweno/gh/releases/tag/v1.0.0).\r\n\r\n## Overview\r\n\r\ngh is a command line client to GitHub. It's designed to run as fast as possible with easy installation across operating systems.\r\nIf you like gh, please also take a look at [hub](https://github.com/github/hub). Hub is a reference implementation to gh.\r\n\r\n## Motivation\r\n\r\n**Fast** \r\n\r\n    $ time hub version > /dev/null\r\n    hub version > /dev/null  0.03s user 0.01s system 93% cpu 0.047 total\r\n\r\n    $ time gh version > /dev/null\r\n    gh version > /dev/null  0.01s user 0.01s system 85% cpu 0.022 total\r\n\r\n    $ time hub browse > /dev/null\r\n    hub browse > /dev/null  0.07s user 0.04s system 87% cpu 0.130 total\r\n\r\n    $ time gh browse > /dev/null\r\n    gh browse > /dev/null  0.03s user 0.02s system 87% cpu 0.059 total\r\n\r\n**Muti-platforms**\r\n\r\ngh is fully implemented in the Go language and is designed to run across operating systems.\r\n\r\n**Easy installation**\r\n\r\nThere're no pre-requirements to install gh. Download the [binary](https://github.com/jingweno/gh/releases) and go!\r\n\r\n## Installation\r\n\r\n### Homebrew\r\n\r\nThe easiest way to install `gh` on OSX is through [Homebrew](https://github.com/mxcl/homebrew).\r\nYou can add the [gh Homebrew repository](https://github.com/jingweno/homebrew-gh) with [`brew tap`](https://github.com/mxcl/homebrew/wiki/brew-tap):\r\n\r\n    $ brew tap jingweno/gh\r\n    $ brew install gh\r\n\r\n### Standalone\r\n\r\n`gh` can be easily installed as an executable.\r\nDownload the latest [compiled binary forms of gh](https://github.com/jingweno/gh/releases) for Darwin, Linux and Windows.\r\n\r\n### Boxen\r\n\r\nIf you're using [boxen](http://boxen.github.com/), there's a [puppet-gh](https://github.com/boxen/puppet-gh) module to install and set up `gh`.\r\n\r\n### Source\r\n\r\nTo compile gh from source, you need to have a [Go development environment](http://golang.org/doc/install), version 1.1 or better, and run:\r\n\r\n    $ go get github.com/jingweno/gh\r\n\r\nNote that `go get` will pull down sources from various VCS.\r\nPlease make sure you have git and hg installed.\r\n\r\n## Update\r\n\r\n`gh` comes with a command to self update:\r\n\r\n    $ gh update\r\n\r\n### Autoupdate\r\n\r\n`gh` checks every two weeks for newer versions and prompts you for update if there's one.\r\nA timestamp is stored in `~/.config/gh-update` for the next update time.\r\nYou can turn off the update prompt and allow `gh` does it automatically by setting \"autoupdate\" to true in [`~/.config/gh`](https://github.com/jingweno/gh#available-settings).\r\n\r\n### Homebrew\r\n\r\nIf you installed `gh` with `brew tap jingweno/gh`, you can update it with:\r\n\r\n    $ brew upgrade gh\r\n\r\n### Source\r\n\r\nTo update gh from source, run:\r\n\r\n    $ go get -u github.com/jingweno/gh\r\n\r\n## Aliasing\r\n\r\nIt's best to use `gh` by aliasing it to `git`.\r\nAll git commands will still work with `gh` adding some sugar.\r\n\r\n`gh alias` displays instructions for the current shell. With the `-s` flag,\r\nit outputs a script suitable for `eval`.\r\n\r\nYou should place this command in your `.bash_profile` or other startup\r\nscript:\r\n\r\n    eval \"$(gh alias -s)\"\r\n\r\nFor more details, run `gh help alias`.\r\n\r\n## Usage\r\n\r\n### gh help\r\n    \r\n    $ gh help\r\n    [display help for all commands]\r\n    $ gh help pull-request\r\n    [display help for pull-request]\r\n\r\n### gh init\r\n\r\n    $ gh init -g\r\n    > git init\r\n    > git remote add origin git@github.com:YOUR_USER/REPO.git\r\n\r\n### gh push\r\n\r\n    $ gh push origin,staging,qa bert_timeout\r\n    > git push origin bert_timeout\r\n    > git push staging bert_timeout\r\n    > git push qa bert_timeout\r\n\r\n    $ gh push origin\r\n    > git push origin HEAD\r\n\r\n### gh checkout\r\n\r\n    $ gh checkout https://github.com/jingweno/gh/pull/35\r\n    > git remote add -f -t feature git://github:com/foo/gh.git\r\n    > git checkout --track -B foo-feature foo/feature\r\n\r\n    $ gh checkout https://github.com/jingweno/gh/pull/35 custom-branch-name\r\n\r\n### gh merge\r\n\r\n    $ gh merge https://github.com/jingweno/gh/pull/73\r\n    > git fetch git://github.com/jingweno/gh.git +refs/heads/feature:refs/remotes/jingweno/feature\r\n    > git merge jingweno/feature --no-ff -m 'Merge pull request #73 from jingweno/feature...'\r\n\r\n### gh clone\r\n\r\n    $ gh clone jingweno/gh\r\n    > git clone git://github.com/jingweno/gh\r\n\r\n    $ gh clone -p jingweno/gh\r\n    > git clone git@github.com:jingweno/gh.git\r\n\r\n    $ gh clone jekyll_and_hype\r\n    > git clone git://github.com/YOUR_LOGIN/jekyll_and_hype.\r\n\r\n    $ gh clone -p jekyll_and_hype\r\n    > git clone git@github.com:YOUR_LOGIN/jekyll_and_hype.git\r\n\r\n### gh fetch\r\n\r\n    $ gh fetch jingweno\r\n    > git remote add jingweno git://github.com/jingweno/REPO.git\r\n    > git fetch jingweno\r\n\r\n    $ gh fetch jingweno,foo\r\n    > git remote add jingweno ...\r\n    > git remote add foo ...\r\n    > git fetch --multiple jingweno foo\r\n\r\n    $ gh fetch --multiple jingweno foo\r\n    > git remote add jingweno ...\r\n    > git remote add foo ...\r\n    > git fetch --multiple jingweno foo\r\n\r\n### gh cherry-pick\r\n\r\n    $ gh cherry-pick https://github.com/jingweno/gh/commit/a319d88#comments\r\n    > git remote add -f jingweno git://github.com/jingweno/gh.git\r\n    > git cherry-pick a319d88\r\n\r\n    $ gh cherry-pick jingweno@a319d88\r\n    > git remote add -f jingweno git://github.com/jingweno/gh.git\r\n    > git cherry-pick a319d88\r\n\r\n    $ gh cherry-pick jingweno@SHA\r\n    > git fetch jingweno\r\n    > git cherry-pick SHA\r\n\r\n### gh remote\r\n\r\n    $ gh remote add jingweno\r\n    > git remote add -f jingweno git://github.com/jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add -p jingweno\r\n    > git remote add -f jingweno git@github.com:jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add origin\r\n    > git remote add -f YOUR_USER git://github.com/YOUR_USER/CURRENT_REPO.git    \r\n\r\n### gh submodule\r\n\r\n    $ gh submodule add jingweno/gh vendor/gh\r\n    > git submodule add git://github.com/jingweno/gh.git vendor/gh\r\n\r\n    $ gh submodule add -p jingweno/gh vendor/gh\r\n    > git submodule add git@github.com:jingweno/gh.git vendor/gh\r\n\r\n    $ gh submodule add -b gh --name gh jingweno/gh vendor/gh\r\n    > git submodule add -b gh --name gh git://github.com/jingweno/gh.git vendor/gh\r\n\r\n### gh pull-request\r\n\r\n    # while on a topic branch called \"feature\":\r\n    $ gh pull-request\r\n    [ opens text editor to edit title & body for the request ]\r\n    [ opened pull request on GitHub for \"YOUR_USER:feature\" ]\r\n\r\n    # explicit pull base & head:\r\n    $ gh pull-request -b jingweno:master -h jingweno:feature\r\n\r\n    $ gh pull-request -m \"title\\n\\nbody\"\r\n    [ create pull request with title & body  ]\r\n\r\n    $ gh pull-request -i 123\r\n    [ attached pull request to issue #123 ]\r\n\r\n    $ gh pull-request https://github.com/jingweno/gh/pull/123\r\n    [ attached pull request to issue #123 ]\r\n\r\n    $ gh pull-request -F FILE\r\n    [ create pull request with title & body from FILE ]\r\n\r\n### gh apply\r\n\r\n    $ gh apply https://github.com/jingweno/gh/pull/55\r\n    > curl https://github.com/jingweno/gh/pull/55.patch -o /tmp/55.patch\r\n    > git apply /tmp/55.patch\r\n\r\n    $ gh apply --ignore-whitespace https://github.com/jingweno/gh/commit/fdb9921\r\n    > curl https://github.com/jingweno/gh/commit/fdb9921.patch -o /tmp/fdb9921.patch\r\n    > git apply --ignore-whitespace /tmp/fdb9921.patch\r\n\r\n    $ gh apply https://gist.github.com/8da7fb575debd88c54cf\r\n    > curl https://gist.github.com/8da7fb575debd88c54cf.txt -o /tmp/gist-8da7fb575debd88c54cf.txt\r\n    > git apply /tmp/gist-8da7fb575debd88c54cf.txt\r\n\r\n### gh fork\r\n\r\n    $ gh fork\r\n    [ repo forked on GitHub ]\r\n    > git remote add -f YOUR_USER git@github.com:YOUR_USER/CURRENT_REPO.git\r\n\r\n    $ gh fork --no-remote\r\n    [ repo forked on GitHub ]\r\n\r\n### gh create\r\n\r\n    $ gh create\r\n    ... create repo on github ...\r\n    > git remote add -f origin git@github.com:YOUR_USER/CURRENT_REPO.git\r\n\r\n    # with description:\r\n    $ gh create -d 'It shall be mine, all mine!'\r\n\r\n    $ gh create recipes\r\n    [ repo created on GitHub ]\r\n    > git remote add origin git@github.com:YOUR_USER/recipes.git\r\n\r\n    $ gh create sinatra/recipes\r\n    [ repo created in GitHub organization ]\r\n    > git remote add origin git@github.com:sinatra/recipes.git\r\n\r\n### gh ci-status\r\n\r\n    $ gh ci-status\r\n    > (prints CI state of HEAD and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n\r\n    $ gh ci-status -v\r\n    > (prints CI state of HEAD, the URL to the CI build results and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n\r\n    $ gh ci-status BRANCH\r\n    > (prints CI state of BRANCH and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n\r\n    $ gh ci-status SHA\r\n    > (prints CI state of SHA and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n    \r\n### gh browse\r\n\r\n    $ gh browse\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO\r\n\r\n    $ gh browse commit/SHA\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/commit/SHA\r\n\r\n    $ gh browse issues\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/issues\r\n\r\n    $ gh browse -p jingweno/gh\r\n    > open https://github.com/jingweno/gh\r\n\r\n    $ gh browse -p jingweno/gh commit/SHA\r\n    > open https://github.com/jingweno/gh/commit/SHA\r\n\r\n    $ gh browse -p resque\r\n    > open https://github.com/YOUR_USER/resque\r\n\r\n    $ gh browse -p resque network\r\n    > open https://github.com/YOUR_USER/resque/network\r\n\r\n### gh compare\r\n\r\n    $ gh compare refactor\r\n    > open https://github.com/CURRENT_REPO/compare/refactor\r\n\r\n    $ gh compare 1.0..1.1\r\n    > open https://github.com/CURRENT_REPO/compare/1.0...1.1\r\n\r\n    $ gh compare -u other-user patch\r\n    > open https://github.com/other-user/REPO/compare/patch\r\n\r\n### gh release (beta)\r\n\r\n    $ gh release\r\n    > (prints a list of releases of YOUR_USER/CURRENT_REPO)\r\n\r\n\r\n### gh issues (beta)\r\n\r\n    $ gh issues\r\n    > (prints a list of issues for YOUR_USER/CURRENT_REPO)\r\n\r\n## Configuration\r\n\r\n### GitHub OAuth authentication\r\n\r\n`gh` will prompt for GitHub username & password the first time it needs\r\nto access the API and exchange it for an OAuth token, which it saves in\r\n`~/.config/gh`.\r\n\r\n### Available settings\r\n\r\nThis is a list of available settings in `~/.config/gh`:\r\n\r\n```json\r\n{\r\n  \"credentials\": [\r\n    {\r\n      \"host\": \"HOST1\",\r\n      \"user\": \"USER_NAME1\",\r\n      \"access_token\": \"ACCESS_TOKEN1\"\r\n    },\r\n    {\r\n      \"host\": \"HOST2\",\r\n      \"user\": \"USER_NAME2\",\r\n      \"access_token\": \"ACCESS_TOKEN2\"\r\n    }\r\n  ],\r\n  \"autoupdate\": false\r\n}\r\n```\r\n\r\n### HTTPS instead of git protocol\r\n\r\nIf you prefer using the HTTPS protocol for GitHub repositories instead\r\nof the git protocol for read and ssh for write, you can set\r\n\"gh.protocol\" to \"https\".\r\n\r\n    # default behavior\r\n    $ git clone jingweno/gh\r\n    < git clone >\r\n\r\n    # opt into HTTPS:\r\n    $ git config --global gh.protocol https\r\n    $ git clone jingweno/gh\r\n    < https clone >\r\n\r\n## Release Notes\r\n\r\nSee [Releases](https://github.com/jingweno/gh/releases).\r\n\r\n## Roadmap\r\n\r\nSee [Issues](https://github.com/jingweno/gh/issues?labels=feature&page=1&state=open).\r\n\r\n## script/bootstrap\r\n\r\nThis script will get all the dependencies ready so you can start hacking on gh.\r\n\r\n```\r\n$ ./script/bootstrap\r\n```\r\n\r\n## script/build\r\n\r\nThis script will build gh. It will also perform script/bootstrap, which gets all dependencies and all that jazz.\r\n\r\n```\r\n$ ./script/build\r\n```\r\n\r\n## script/release\r\n\r\nThis script will cross-compile gh and prepare for release.\r\n\r\n```\r\n$ ./script/release\r\n```\r\n\r\n## script/test\r\n\r\nFor your convenience, there is a script to run the tests.\r\n\r\n```\r\n$ ./script/test\r\n```\r\n\r\n## Contributors\r\n\r\nSee [Contributors](https://github.com/jingweno/gh/graphs/contributors).\r\n\r\n## License\r\n\r\ngh is released under the MIT license. See [LICENSE.md](https://github.com/jingweno/gh/blob/master/LICENSE.md).\r\n","google":"UA-41570916-1","note":"Don't delete this file! It's used internally to help with page regeneration."}