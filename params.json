{"name":"gh","tagline":"Fast GitHub command line client.","body":"# g + h = github\r\n\r\nFast GitHub command line client. Current version is [0.7.0](https://drone.io/github.com/jingweno/gh/files).\r\n\r\n## Overview\r\n\r\ngh is a command line client to GitHub. It's designed to run as fast as possible with easy installation across operating systems.\r\nIf you like gh, please also take a look at [hub](https://github.com/defunkt/hub). Hub is a reference implementation to gh.\r\n\r\n## Motivation\r\n\r\n**Fast** \r\n\r\n    $ time hub version > /dev/null\r\n    hub version > /dev/null  0.03s user 0.01s system 93% cpu 0.047 total\r\n\r\n    $ time gh version > /dev/null\r\n    gh version > /dev/null  0.01s user 0.01s system 85% cpu 0.022 total\r\n\r\n    $ time hub browse > /dev/null\r\n    hub browse > /dev/null  0.07s user 0.04s system 87% cpu 0.130 total\r\n\r\n    $ time gh browse > /dev/null\r\n    gh browse > /dev/null  0.03s user 0.02s system 87% cpu 0.059 total\r\n\r\n**Muti-platforms**\r\n\r\ngh is fully implemented in the Go language and is designed to run across operating systems.\r\n\r\n**Easy installation**\r\n\r\nThere're no pre-requirements to run gh. Download the [binary](https://drone.io/github.com/jingweno/gh/files) and go!\r\n\r\n**Unix**\r\n\r\ngh commands are single, unhyphenated words that map to their Unix ancestorsâ€™ names and flags where applicable.\r\n\r\n## Installation\r\n\r\nThere are [compiled binary forms of gh](https://drone.io/github.com/jingweno/gh/files) for Darwin, Linux and Windows.\r\n\r\nTo install gh on OSX with [Homebrew](https://github.com/mxcl/homebrew), run:\r\n\r\n    $ brew install https://raw.github.com/jingweno/gh/master/homebrew/gh.rb\r\n\r\n## Compilation\r\n\r\nTo compile gh from source, you need to have a [Go development environment](http://golang.org/doc/install), version 1.1 or better, and run:\r\n\r\n    $ go get github.com/jingweno/gh\r\n\r\nNote that `go get` will pull down sources from various VCS.\r\nPlease make sure you have git and hg installed.\r\n\r\n## Upgrade\r\n\r\nSince gh is under heavy development, I roll out new releases often.\r\nPlease take a look at the [CI server](https://drone.io/github.com/jingweno/gh/files) for the latest built binaries.\r\nI plan to implement automatic upgrade in the future.\r\n\r\nTo upgrade gh on OSX with Homebrew, run:\r\n\r\n    $ brew upgrade https://raw.github.com/jingweno/gh/master/homebrew/gh.rb\r\n\r\nTo upgrade gh from source, run:\r\n\r\n    $ go get -u github.com/jingweno/gh\r\n\r\n## Usage\r\n\r\n### gh help\r\n    \r\n    $ gh help\r\n    Usage: gh [command] [options] [arguments]\r\n\r\n    Commands:\r\n\r\n        pull              Open a pull request on GitHub\r\n        fork              Make a fork of a remote repository on GitHub and add as remote\r\n        ci                Show CI status of a commit\r\n        remote            Add remote from GitHub repository\r\n        browse            Open a GitHub page in the default browser\r\n        compare           Open a compare page on GitHub\r\n        help              Show help\r\n        version           Show gh version\r\n\r\n    See 'gh help [command]' for more information about a command.\r\n\r\n### gh pull\r\n\r\n    # while on a topic branch called \"feature\":\r\n    $ gh pull\r\n    [ opens text editor to edit title & body for the request ]\r\n    [ opened pull request on GitHub for \"YOUR_USER:feature\" ]\r\n\r\n    # explicit pull base & head:\r\n    $ gh pull -b jingweno:master -h jingweno:feature\r\n\r\n    $ gh pull -i 123\r\n    [ attached pull request to issue #123 ]\r\n\r\n### gh fork\r\n\r\n    $ gh fork\r\n    [ repo forked on GitHub ]\r\n    > git remote add -f YOUR_USER git@github.com:YOUR_USER/CURRENT_REPO.git\r\n\r\n    $ gh fork --no-remote\r\n    [ repo forked on GitHub ]\r\n\r\n### gh ci\r\n\r\n    $ gh ci\r\n    > (prints CI state of HEAD and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no\r\n    > status (3)\r\n\r\n    $ gh ci BRANCH\r\n    > (prints CI state of BRANCH and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no\r\n    > status (3)\r\n\r\n    $ gh ci SHA\r\n    > (prints CI state of SHA and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no\r\n    > status (3)\r\n    \r\n### gh remote\r\n\r\n    $ gh remote add jingweno\r\n    > git remote add -f jingweno git://github.com/jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add -p jingweno\r\n    > git remote add -f jingweno git@github.com:jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add origin\r\n    > git remote add -f YOUR_USER git://github.com/YOUR_USER/CURRENT_REPO.git    \r\n\r\n### gh browse\r\n\r\n    $ gh browse\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO\r\n\r\n    $ gh browse commit/SHA\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/commit/SHA\r\n\r\n    $ gh browse issues\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/issues\r\n\r\n    $ gh browse -u jingweno -r gh\r\n    > open https://github.com/jingweno/gh\r\n\r\n    $ gh browse -u jingweno -r gh commit/SHA\r\n    > open https://github.com/jingweno/gh/commit/SHA\r\n\r\n    $ git browse -r resque\r\n    > open https://github.com/YOUR_USER/resque\r\n\r\n    $ git browse -r resque network\r\n    > open https://github.com/YOUR_USER/resque/network\r\n\r\n### gh compare\r\n\r\n    $ gh compare refactor\r\n    > open https://github.com/CURRENT_REPO/compare/refactor\r\n\r\n    $ gh compare 1.0..1.1\r\n    > open https://github.com/CURRENT_REPO/compare/1.0...1.1\r\n\r\n    $ gh compare -u other-user patch\r\n    > open https://github.com/other-user/REPO/compare/patch\r\n\r\n## Release Notes\r\n\r\n* **0.7.0** June 12, 2013\r\n  * Implement `gh remote`\r\n* **0.6.1** June 12, 2013\r\n  * Allow optional `.git` as Git url\r\n* **0.6.0** June 11, 2013\r\n  * Implement `fork`\r\n* **0.5.2** June 8, 2013\r\n  * Extract GitHub API related code to [`octokat`](https://github.com/jingweno/octokat)\r\n* **0.5.1** June 7, 2013\r\n  * Remove `-p` flag from `browse`\r\n* **0.5.0** June 5, 2013\r\n  * Rename `pull-request` to `pull`\r\n  * Rename `ci-status` to `ci`\r\n* **0.4.1** June 2, 2013\r\n  * Add Rake task to bump version\r\n* **0.4.0** June 2, 2013\r\n  * Implement `compare`\r\n  * Fix bugs on `browse`\r\n* **0.0.3** June 1, 2013\r\n  * Implement `browse`\r\n* **0.0.2** May 29, 2013\r\n  * Implement `ci`\r\n* **0.0.1** May 22, 2013\r\n  * Implement `pull-request`\r\n\r\n## Roadmap\r\n\r\n* authentication (done)\r\n* gh pull-request (done)\r\n* gh ci-status (done)\r\n* gh browse (done)\r\n* gh compare (done)\r\n* gh fork (done)\r\n* gh clone (in progress)\r\n* gh remote add\r\n* gh fetch\r\n* gh cherry-pick\r\n* gh am, gh apply\r\n* gh check\r\n* gh merge\r\n* gh create\r\n* gh init\r\n* gh push\r\n* gh submodule\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Contributors\r\n\r\nNames in no particular order:\r\n\r\n* [jingweno](https://github.com/jingweno)\r\n* [tgkokk] (https://github.com/tgkokk)\r\n* [dwb](https://github.com/dwb)\r\n* [jgable](https://github.com/jgable)\r\n* [jroes](https://github.com/jroes)\r\n\r\n## License\r\n\r\ngh is released under the MIT license. See [LICENSE.md](https://github.com/jingweno/gh/blob/master/LICENSE.md).","google":"UA-41570916-1","note":"Don't delete this file! It's used internally to help with page regeneration."}