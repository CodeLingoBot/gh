{"name":"gh","tagline":"Fast GitHub command line client.","body":"# g + h = github\r\n\r\nFast GitHub command line client implemented in Go. Current version is [0.11.0](http://bit.ly/go-gh).\r\n\r\n## Overview\r\n\r\ngh is a command line client to GitHub. It's designed to run as fast as possible with easy installation across operating systems.\r\nIf you like gh, please also take a look at [hub](https://github.com/defunkt/hub). Hub is a reference implementation to gh.\r\n\r\n## Motivation\r\n\r\n**Fast** \r\n\r\n    $ time hub version > /dev/null\r\n    hub version > /dev/null  0.03s user 0.01s system 93% cpu 0.047 total\r\n\r\n    $ time gh version > /dev/null\r\n    gh version > /dev/null  0.01s user 0.01s system 85% cpu 0.022 total\r\n\r\n    $ time hub browse > /dev/null\r\n    hub browse > /dev/null  0.07s user 0.04s system 87% cpu 0.130 total\r\n\r\n    $ time gh browse > /dev/null\r\n    gh browse > /dev/null  0.03s user 0.02s system 87% cpu 0.059 total\r\n\r\n**Muti-platforms**\r\n\r\ngh is fully implemented in the Go language and is designed to run across operating systems.\r\n\r\n**Easy installation**\r\n\r\nThere're no pre-requirements to run gh. Download the [binary](http://bit.ly/go-gh) and go!\r\n\r\n## Installation\r\n\r\n\r\n### Homebrew\r\n\r\nInstalling on OSX is easiest with [Homebrew](https://github.com/mxcl/homebrew):\r\n\r\n    $ brew install https://raw.github.com/jingweno/gh/master/homebrew/gh.rb\r\n\r\n### Standalone\r\n\r\n`gh` is easily installed as an executable.\r\nDownload the [compiled binary forms of gh](http://bit.ly/go-gh) for Darwin, Linux and Windows.\r\n\r\n### Source\r\n\r\nTo compile gh from source, you need to have a [Go development environment](http://golang.org/doc/install), version 1.1 or better, and run:\r\n\r\n    $ go get github.com/jingweno/gh\r\n\r\nNote that `go get` will pull down sources from various VCS.\r\nPlease make sure you have git and hg installed.\r\n\r\n## Upgrade\r\n\r\nSince gh is under heavy development, I roll out new releases often.\r\nPlease take a look at the [built binaries](http://bit.ly/go-gh) for the latest built binaries.\r\nI plan to implement automatic upgrade in the future.\r\n\r\n### Homebrew\r\n\r\nTo upgrade gh on OSX with Homebrew, run:\r\n\r\n    $ brew upgrade https://raw.github.com/jingweno/gh/master/homebrew/gh.rb\r\n\r\n### Source\r\n\r\nTo upgrade gh from source, run:\r\n\r\n    $ go get -u github.com/jingweno/gh\r\n\r\n## Aliasing\r\n\r\nIt's best to use `gh` by aliasing it to `git`.\r\nAll git commands will still work with `gh` adding some sugar.\r\n\r\n`gh alias` displays instructions for the current shell. With the `-s` flag,\r\nit outputs a script suitable for `eval`.\r\n\r\nYou should place this command in your `.bash_profile` or other startup\r\nscript:\r\n\r\n    eval \"$(gh alias -s)\"\r\n\r\nFor more details, run `gh help alias`.\r\n\r\n## Usage\r\n\r\n### gh help\r\n    \r\n    $ gh help\r\n    Usage: gh [command] [options] [arguments]\r\n\r\n    Basic Commands:\r\n        init              Create an empty git repository or reinitialize an existing one\r\n\r\n    Branching Commands:\r\n        checkout          Switch the active branch to another branch\r\n        merge             Join two or more development histories (branches) together\r\n\r\n    Remote Commands:\r\n        clone             Clone a remote repository into a new directory\r\n        remote            View and manage a set of remote repositories\r\n\r\n    GitHub Commands:\r\n        pull-request      Open a pull request on GitHub\r\n        fork              Make a fork of a remote repository on GitHub and add as remote\r\n        ci-status         Show CI status of a commit\r\n        browse            Open a GitHub page in the default browser\r\n        compare           Open a compare page on GitHub\r\n\r\n    See 'gh help [command]' for more information about a command.\r\n\r\n### git init\r\n\r\n    $ gh init -g\r\n    > git init\r\n    > git remote add origin git@github.com:YOUR_USER/REPO.git\r\n\r\n### gh checkout\r\n\r\n    $ gh checkout https://github.com/jingweno/gh/pull/35\r\n    > git remote add -f -t feature git://github:com/foo/gh.git\r\n    > git checkout --track -B foo-feature foo/feature\r\n\r\n    $ gh checkout https://github.com/jingweno/gh/pull/35 custom-branch-name\r\n\r\n### gh merge\r\n\r\n    $ gh merge https://github.com/jingweno/gh/pull/73\r\n    > git fetch git://github.com/jingweno/gh.git +refs/heads/feature:refs/remotes/jingweno/feature\r\n    > git merge jingweno/feature --no-ff -m 'Merge pull request #73 from jingweno/feature...'\r\n\r\n### gh clone\r\n\r\n    $ gh clone jingweno/gh\r\n    > git clone git://github.com/jingweno/gh\r\n\r\n    $ gh clone -p jingweno/gh\r\n    > git clone git@github.com:jingweno/gh.git\r\n\r\n    $ gh clone jekyll_and_hype\r\n    > git clone git://github.com/YOUR_LOGIN/jekyll_and_hype.\r\n\r\n    $ gh clone -p jekyll_and_hype\r\n    > git clone git@github.com:YOUR_LOGIN/jekyll_and_hype.git\r\n\r\n### gh remote\r\n\r\n    $ gh remote add jingweno\r\n    > git remote add -f jingweno git://github.com/jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add -p jingweno\r\n    > git remote add -f jingweno git@github.com:jingweno/CURRENT_REPO.git\r\n\r\n    $ gh remote add origin\r\n    > git remote add -f YOUR_USER git://github.com/YOUR_USER/CURRENT_REPO.git    \r\n\r\n### gh pull-request\r\n\r\n    # while on a topic branch called \"feature\":\r\n    $ gh pull-request\r\n    [ opens text editor to edit title & body for the request ]\r\n    [ opened pull request on GitHub for \"YOUR_USER:feature\" ]\r\n\r\n    # explicit pull base & head:\r\n    $ gh pull-request -b jingweno:master -h jingweno:feature\r\n\r\n    $ gh pull-request -i 123\r\n    [ attached pull request to issue #123 ]\r\n\r\n### gh fork\r\n\r\n    $ gh fork\r\n    [ repo forked on GitHub ]\r\n    > git remote add -f YOUR_USER git@github.com:YOUR_USER/CURRENT_REPO.git\r\n\r\n    $ gh fork --no-remote\r\n    [ repo forked on GitHub ]\r\n\r\n### gh ci-status\r\n\r\n    $ gh ci-status\r\n    > (prints CI state of HEAD and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n\r\n    $ gh ci-status BRANCH\r\n    > (prints CI state of BRANCH and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n\r\n    $ gh ci-status SHA\r\n    > (prints CI state of SHA and exits with appropriate code)\r\n    > One of: success (0), error (1), failure (1), pending (2), no status (3)\r\n    \r\n### gh browse\r\n\r\n    $ gh browse\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO\r\n\r\n    $ gh browse commit/SHA\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/commit/SHA\r\n\r\n    $ gh browse issues\r\n    > open https://github.com/YOUR_USER/CURRENT_REPO/issues\r\n\r\n    $ gh browse -u jingweno -r gh\r\n    > open https://github.com/jingweno/gh\r\n\r\n    $ gh browse -u jingweno -r gh commit/SHA\r\n    > open https://github.com/jingweno/gh/commit/SHA\r\n\r\n    $ gh browse -r resque\r\n    > open https://github.com/YOUR_USER/resque\r\n\r\n    $ gh browse -r resque network\r\n    > open https://github.com/YOUR_USER/resque/network\r\n\r\n### gh compare\r\n\r\n    $ gh compare refactor\r\n    > open https://github.com/CURRENT_REPO/compare/refactor\r\n\r\n    $ gh compare 1.0..1.1\r\n    > open https://github.com/CURRENT_REPO/compare/1.0...1.1\r\n\r\n    $ gh compare -u other-user patch\r\n    > open https://github.com/other-user/REPO/compare/patch\r\n\r\n## Release Notes\r\n\r\nSee [Releases](https://github.com/jingweno/gh/releases).\r\n\r\n## Roadmap\r\n\r\nSee [Issues](https://github.com/jingweno/gh/issues?labels=feature&page=1&state=open).\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Contributors\r\n\r\nSee [Contributors](https://github.com/jingweno/gh/graphs/contributors).\r\n\r\n## License\r\n\r\ngh is released under the MIT license. See [LICENSE.md](https://github.com/jingweno/gh/blob/master/LICENSE.md).\r\n","google":"UA-41570916-1","note":"Don't delete this file! It's used internally to help with page regeneration."}